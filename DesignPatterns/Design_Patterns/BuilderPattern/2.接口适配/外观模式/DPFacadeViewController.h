//
//  DPFacadeViewController.h
//  Design_Patterns
//
//  Created by yixiaoluo on 15/9/24.
//  Copyright © 2015年 yixiaoluo. All rights reserved.
//

#import <UIKit/UIKit.h>

//http://design-patterns.readthedocs.org/zh_CN/latest/structural_patterns/facade.html
/*
 根据“单一职责原则”，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。 -外观模式也是“迪米特法则”的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。 - 外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性分隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。 -外观模式的目的在于降低系统的复杂程度。 -外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。
 */

@interface DPFacadeViewController : UIViewController

@end

//感觉外观模式（门面模式）和中介者模式很像，但看完的理解感觉中介者更倾向于对封装类的解耦，而外观模式更倾向客户端提供一个“多个子系统”的统一入口（外观/门面）。

/*
下面是在网上的说法，也便于自己理解:
 
电脑中有cpu、显卡、电源，内存，主板相当于中介者（解耦各个组件）， 键盘相当于门面（给用户提供窗口）。

 １。门面模式是结构型模式，中介者模式是行为型模式。
 ２。门面模式是对子系统提供统一的接口，中介者模式是用一个中介对象来封装一系列同事对象的交互行为。
 ３。门面模式协议是单向，中介者模式协议是双向。
 ４。门面模式所有的请求处理都委托给子系统完成，而中介者模式则由中心协调同事类和中心本身共同完成业务。

*/