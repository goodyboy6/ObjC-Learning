//
//  DPBridgeViewController.h
//  Design_Patterns
//
//  Created by yixiaoluo on 15/9/24.
//  Copyright © 2015年 yixiaoluo. All rights reserved.
//

#import <UIKit/UIKit.h>

//桥接模式（Bridge）来做(多维度变化)->组合
//桥接，顾名思义，在接口与实现之间，架设一座桥梁，这座桥，其实并非是为了过河，而是隔离接口与实现。这就是著名的OO原则：DIP，ISP，依赖倒置（细节依赖抽象，抽象不依赖细节，接口隔离）

//实例1：不同的人开着不同的汽车在不同的路上行驶(人、路、车)；
//=>接口: 人－>开车 －> 路；
//=>实现: 人－>开bus －> 高速路；

//实例2: 画各种形状（点、线、矩形、圆、平行四边形...）;
//=>接口: 形状－>描画；
//=>实现: 形状－>画条线；

//只针对接口，而不是具体的细节。
//这就是桥接模式。使用一个接口，封装了具体的实现。这些实现在使用的时候可以灵活替换（LSP原则），更重要的是，当有新的需求时，我们只是使用新的实现替换一下老的实现，就可以了，而无需改变原来的形状的接口（OCP原则）

@interface DPBridgeViewController : UIViewController

@end


/*
桥接模式与装饰的区别:
装饰模式:
这两个模式在一定程度上都是为了减少子类的数目，避免出现复杂的继承关系。但是它们解决的方法却各有不同，装饰模式把子类中比基类中多出来的部分放到单独的类里面，以适应新功能增加的需要，当我们把描述新功能的类封装到基类的对象里面时，就得到了所需要的子类对象，这些描述新功能的类通过组合可以实现很多的功能组合 .
桥接模式：
桥接模式则把原来的基类的实现化细节抽象出来，在构造到一个实现化的结构中，然后再把原来的基类改造成一个抽象化的等级结构，这样就可以实现系统在多个维度上的独立变化 。
*/